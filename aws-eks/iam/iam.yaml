Description: 'EKS Cluster Role'

Parameters:

  EnvironmentName:
    Description: Env name will be used to tag resources and refer to output parameters in other cloud formation scripts
    Type: String

Mappings:
    ServicePrincipals:
      aws-cn:
        ec2: ec2.amazonaws.com.cn
      aws-us-gov:
        ec2: ec2.amazonaws.com
      aws:
        ec2: ec2.amazonaws.com

Resources:

  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EksNodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - !FindInMap [ServicePrincipals, !Ref "AWS::Partition", ec2]
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        Path: /

Outputs:

  EKSRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EksClusterRole.Arn
    Export:
      Name: !Sub "${EnvironmentName}-RoleArn"
  
  EksNodeInstanceRoleArn:
    Description: The role that Amazon EKS worker node kubelet daemon will use to make calls to AWS APIs 
    Value: !GetAtt EksNodeInstanceRole.Arn
    Export:
      Name: !Sub "${EnvironmentName}-NodeRoleArn"