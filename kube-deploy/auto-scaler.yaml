---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-addon: sampleapp-nginx.addons.k8s.io
    k8s-app: sampleapp-nginx
  name: sampleapp-nginx
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sampleapp-nginx
  labels:
    k8s-addon: sampleapp-nginx.addons.k8s.io
    k8s-app: sampleapp-nginx
rules:
  - apiGroups: [""]
    resources: ["events", "endpoints"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["endpoints"]
    resourceNames: ["sampleapp-nginx"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["watch", "list", "get", "update"]
  - apiGroups: [""]
    resources:
      - "pods"
      - "services"
      - "replicationcontrollers"
      - "persistentvolumeclaims"
      - "persistentvolumes"
    verbs: ["watch", "list", "get"]
  - apiGroups: ["extensions"]
    resources: ["replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["watch", "list"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["batch", "extensions"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
  - apiGroups: ["coordination.k8s.io"]
    resourceNames: ["sampleapp-nginx"]
    resources: ["leases"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sampleapp-nginx
  namespace: kube-system
  labels:
    k8s-addon: sampleapp-nginx.addons.k8s.io
    k8s-app: sampleapp-nginx
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create","list","watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-priority-expander"]
    verbs: ["delete", "get", "update", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sampleapp-nginx
  labels:
    k8s-addon: sampleapp-nginx.addons.k8s.io
    k8s-app: sampleapp-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sampleapp-nginx
subjects:
  - kind: ServiceAccount
    name: sampleapp-nginx
    namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sampleapp-nginx
  namespace: kube-system
  labels:
    k8s-addon: sampleapp-nginx.addons.k8s.io
    k8s-app: sampleapp-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sampleapp-nginx
subjects:
  - kind: ServiceAccount
    name: sampleapp-nginx
    namespace: kube-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleapp-nginx
  namespace: kube-system
  labels:
    app: sampleapp-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sampleapp-nginx
  template:
    metadata:
      labels:
        app: sampleapp-nginx-lb
    spec:
      serviceAccountName: sampleapp-nginx-lb
      tolerations:
        - effect: NoSchedule
          operator: "Equal"
          value: "true"
          key: node-role.kubernetes.io/master
      nodeSelector:
        kubernetes.io/role: master
      containers:
        - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.19.1
          name: cluster-autoscaler
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 300Mi
          command:
            - ./cluster-autoscaler
            - --v=4
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
            - --nodes={{ 1 }}:{{ 10 }}:{{ AutoScaleNode }}
          volumeMounts:
            - name: ssl-certs
              mountPath: /etc/ssl/certs/ca-certificates.crt #/etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
              readOnly: true
          imagePullPolicy: "Always"
      volumes:
        - name: ssl-certs
          hostPath:
            path: "/etc/ssl/certs/ca-bundle.crt"